// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "chat/v1/chat.proto" (package "chat.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message chat.v1.Subscribe
 */
export interface Subscribe {
}
/**
 * @generated from protobuf message chat.v1.Subscribe.Request
 */
export interface Subscribe_Request {
    /**
     * @generated from protobuf field: string client_uuid = 1;
     */
    clientUuid: string;
}
/**
 * @generated from protobuf message chat.v1.Subscribe.Response
 */
export interface Subscribe_Response {
    /**
     * @generated from protobuf field: chat.v1.Message message = 1;
     */
    message?: Message;
}
/**
 * @generated from protobuf message chat.v1.AddMessage
 */
export interface AddMessage {
}
/**
 * @generated from protobuf message chat.v1.AddMessage.Request
 */
export interface AddMessage_Request {
    /**
     * @generated from protobuf field: chat.v1.Message message = 1;
     */
    message?: Message;
}
/**
 * @generated from protobuf message chat.v1.AddMessage.Response
 */
export interface AddMessage_Response {
}
/**
 * @generated from protobuf message chat.v1.Client
 */
export interface Client {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message chat.v1.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: chat.v1.Client client = 1;
     */
    client?: Client;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Subscribe$Type extends MessageType<Subscribe> {
    constructor() {
        super("chat.v1.Subscribe", []);
    }
    create(value?: PartialMessage<Subscribe>): Subscribe {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Subscribe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subscribe): Subscribe {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Subscribe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.Subscribe
 */
export const Subscribe = new Subscribe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Subscribe_Request$Type extends MessageType<Subscribe_Request> {
    constructor() {
        super("chat.v1.Subscribe.Request", [
            { no: 1, name: "client_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Subscribe_Request>): Subscribe_Request {
        const message = { clientUuid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Subscribe_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subscribe_Request): Subscribe_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_uuid */ 1:
                    message.clientUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Subscribe_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_uuid = 1; */
        if (message.clientUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.Subscribe.Request
 */
export const Subscribe_Request = new Subscribe_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Subscribe_Response$Type extends MessageType<Subscribe_Response> {
    constructor() {
        super("chat.v1.Subscribe.Response", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<Subscribe_Response>): Subscribe_Response {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Subscribe_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subscribe_Response): Subscribe_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat.v1.Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Subscribe_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat.v1.Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.Subscribe.Response
 */
export const Subscribe_Response = new Subscribe_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddMessage$Type extends MessageType<AddMessage> {
    constructor() {
        super("chat.v1.AddMessage", []);
    }
    create(value?: PartialMessage<AddMessage>): AddMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddMessage): AddMessage {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AddMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.AddMessage
 */
export const AddMessage = new AddMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddMessage_Request$Type extends MessageType<AddMessage_Request> {
    constructor() {
        super("chat.v1.AddMessage.Request", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<AddMessage_Request>): AddMessage_Request {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddMessage_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddMessage_Request): AddMessage_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat.v1.Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddMessage_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat.v1.Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.AddMessage.Request
 */
export const AddMessage_Request = new AddMessage_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddMessage_Response$Type extends MessageType<AddMessage_Response> {
    constructor() {
        super("chat.v1.AddMessage.Response", []);
    }
    create(value?: PartialMessage<AddMessage_Response>): AddMessage_Response {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddMessage_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddMessage_Response): AddMessage_Response {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AddMessage_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.AddMessage.Response
 */
export const AddMessage_Response = new AddMessage_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Client$Type extends MessageType<Client> {
    constructor() {
        super("chat.v1.Client", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Client>): Client {
        const message = { uuid: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Client>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Client): Client {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Client, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.Client
 */
export const Client = new Client$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("chat.v1.Message", [
            { no: 1, name: "client", kind: "message", T: () => Client },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat.v1.Client client */ 1:
                    message.client = Client.internalBinaryRead(reader, reader.uint32(), options, message.client);
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat.v1.Client client = 1; */
        if (message.client)
            Client.internalBinaryWrite(message.client, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.v1.Message
 */
export const Message = new Message$Type();
/**
 * @generated ServiceType for protobuf service chat.v1.Chat
 */
export const Chat = new ServiceType("chat.v1.Chat", [
    { name: "Subscribe", serverStreaming: true, options: {}, I: Subscribe_Request, O: Subscribe_Response },
    { name: "AddMessage", options: {}, I: AddMessage_Request, O: AddMessage_Response }
]);
