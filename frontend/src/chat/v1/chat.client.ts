// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "chat/v1/chat.proto" (package "chat.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Chat } from "./chat";
import type { AddMessage_Response } from "./chat";
import type { AddMessage_Request } from "./chat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Subscribe_Response } from "./chat";
import type { Subscribe_Request } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service chat.v1.Chat
 */
export interface IChatClient {
    /**
     * @generated from protobuf rpc: Subscribe(chat.v1.Subscribe.Request) returns (stream chat.v1.Subscribe.Response);
     */
    subscribe(input: Subscribe_Request, options?: RpcOptions): ServerStreamingCall<Subscribe_Request, Subscribe_Response>;
    /**
     * @generated from protobuf rpc: AddMessage(chat.v1.AddMessage.Request) returns (chat.v1.AddMessage.Response);
     */
    addMessage(input: AddMessage_Request, options?: RpcOptions): UnaryCall<AddMessage_Request, AddMessage_Response>;
}
/**
 * @generated from protobuf service chat.v1.Chat
 */
export class ChatClient implements IChatClient, ServiceInfo {
    typeName = Chat.typeName;
    methods = Chat.methods;
    options = Chat.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Subscribe(chat.v1.Subscribe.Request) returns (stream chat.v1.Subscribe.Response);
     */
    subscribe(input: Subscribe_Request, options?: RpcOptions): ServerStreamingCall<Subscribe_Request, Subscribe_Response> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Subscribe_Request, Subscribe_Response>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddMessage(chat.v1.AddMessage.Request) returns (chat.v1.AddMessage.Response);
     */
    addMessage(input: AddMessage_Request, options?: RpcOptions): UnaryCall<AddMessage_Request, AddMessage_Response> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddMessage_Request, AddMessage_Response>("unary", this._transport, method, opt, input);
    }
}
