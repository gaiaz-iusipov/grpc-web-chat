// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Message struct {
	Client               *Client  `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Author               string   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Message) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Client)(nil), "chat.Client")
	proto.RegisterType((*Message)(nil), "chat.Message")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x4f, 0xbb, 0x4e, 0xc4, 0x30,
	0x10, 0xbc, 0x84, 0xc8, 0xe8, 0x96, 0x47, 0xb1, 0xc5, 0xc9, 0x0a, 0x0d, 0xb2, 0x28, 0x28, 0x90,
	0x0f, 0x1d, 0xe2, 0x03, 0xd0, 0x89, 0x92, 0xe6, 0x28, 0xa9, 0xec, 0xd8, 0x24, 0x16, 0x01, 0x47,
	0xc9, 0x46, 0x82, 0xbf, 0x47, 0x59, 0x27, 0x45, 0xba, 0x9d, 0x87, 0xc7, 0x33, 0x00, 0x55, 0x63,
	0x48, 0x77, 0x7d, 0xa4, 0x88, 0xc5, 0x74, 0x97, 0x37, 0x75, 0x8c, 0x75, 0xeb, 0xf7, 0xcc, 0xd9,
	0xf1, 0x73, 0xef, 0xbf, 0x3b, 0xfa, 0x4b, 0x16, 0x25, 0x41, 0x1c, 0xdb, 0xe0, 0x7f, 0x08, 0xaf,
	0x21, 0x0f, 0x4e, 0x66, 0xb7, 0xd9, 0xfd, 0xf6, 0x94, 0x07, 0xa7, 0x3e, 0xe0, 0xfc, 0xcd, 0x0f,
	0x83, 0xa9, 0x3d, 0xde, 0x81, 0xa8, 0xd8, 0xc4, 0xf2, 0xc5, 0xe1, 0x52, 0xf3, 0x27, 0xe9, 0xe1,
	0x69, 0xd6, 0x70, 0x07, 0xc2, 0x8c, 0xd4, 0xc4, 0x5e, 0xe6, 0x1c, 0x32, 0x23, 0x44, 0x28, 0xc8,
	0xff, 0x92, 0x3c, 0x63, 0x96, 0xef, 0xc3, 0x17, 0x14, 0xc7, 0xc6, 0x10, 0x3e, 0xc0, 0xf6, 0x7d,
	0xb4, 0x43, 0xd5, 0x07, 0xeb, 0x71, 0x15, 0x5b, 0x5e, 0x25, 0x34, 0x77, 0x50, 0x9b, 0xc7, 0x0c,
	0x9f, 0x01, 0x5e, 0x9c, 0x5b, 0x5a, 0xad, 0x0d, 0xe5, 0x4e, 0xa7, 0x9d, 0x7a, 0xd9, 0xa9, 0x5f,
	0xa7, 0x9d, 0x6a, 0x63, 0x05, 0x33, 0x4f, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xf6, 0xf9,
	0xd4, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	Subscribe(ctx context.Context, in *Client, opts ...grpc.CallOption) (Chat_SubscribeClient, error)
	AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Subscribe(ctx context.Context, in *Client, opts ...grpc.CallOption) (Chat_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/chat.Chat/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatSubscribeClient struct {
	grpc.ClientStream
}

func (x *chatSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat.Chat/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	Subscribe(*Client, Chat_SubscribeServer) error
	AddMessage(context.Context, *Message) (*empty.Empty, error)
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) Subscribe(req *Client, srv Chat_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedChatServer) AddMessage(ctx context.Context, req *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Client)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Subscribe(m, &chatSubscribeServer{stream})
}

type Chat_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatSubscribeServer struct {
	grpc.ServerStream
}

func (x *chatSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMessage",
			Handler:    _Chat_AddMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Chat_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
